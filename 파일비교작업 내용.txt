1. 파일컨버젼SHELL
  - 기능 : 1) 파라메터로 받은 입력 파일을 항목을 제어해서 출력 파일을 만든다. 
           2) 패턴 파일의 내용을 기준으로 출력할 파일의 항목을 선정하고 출력하게 한다. 
           3) 헤더가 포함된 경우에는 헤더를 삭제하고 출력한다. 
           4) 입력패스는 수시로 바뀔수 있기에 파라메터로 받아 고정시키지 않는다. 
           5) 출력폴더, 패턴폴더는 고정된 폴더를 사용한다. 
           6) 입력이 CSV인 경우에는 항목 위치로 출력할 항목을 선택하게 하고 
                    TXT인 경우에는 항목위치 + 항목길이로 출력 항목을 선택하게 한다. 

  - name : conversionfile.ksh
  - parameter : inpath(입력파일패스)
                infile(입력파일명)
                haader(헤더포함여부 1:삭제, 0:삭제하지 않음)

  - 출력파일패스 : ./output
  - 출력파일명 : infile
  - 패턴파일패스 : ./pattern 
   - 패턴파일명 : infile 
  - 항목 제한 기능
    - 패턴파일 4번째 Row 값이 1이면 출력, 0이면 출력안함
    - 헤더제거(header=1이면 헤더가 포함된 값으로 보고 입력파일의 첫번째 줄은 제거하고 출력한다) 
  - output에 파일 생성
  - Pattern 파일 조정 : 작업중 구현이 불가능 한 부분이 있으면 Pattern파일을 수정해서 조정한다. 단 
       이 부분은 임종구 차장과 협의해서 처리한다. 

2. 파일비교SHELL
  - 기능 : 1) 파일컨버젼SHELL을 호출해서 컨버젼대상 파일을 컨버젼하게 처리한다. 
           2) 컨버젼이 끝난 파일(./output)을 신:현을 비교해서 결과 파일을 diffresult에 출력한다. 
           3) 각종 파라메터를 컨버젼SHELL에 넘겨주어 작업이 가능하게 한다. 두 팀이 협의해서 처리한다. 
           4) 모든 파일은 SORT 후 비교하게 한다. 
           5) 비교결과를 DWH에서 하던 것과 같은 포맷으로 출력하게 한다. 
              건수가 다른 경우도 비교 결과에 건수가 다르다는 표시를 하게 한다. 
           6) 컨버젼이 필요치 않은 파일과 필요한 파일을 구분해서 처리하되 컨버젼이 필요치 않은 파일도 
              output 폴더에 복사해서 비교는 output 폴더에서 일괄로 처리하게 한다.    
           7) 가능하면 비교 대상이 되는 파일리스트를 CSV 파일로 만들어서 일괄로 처리하는 기능도 생각해본다. 
              이 리스트에는 컨버젼할 파일(패스+파일명), 컨버젼여부, 헤더포함 등을 일괄로 정리해서 사용 할수 있으면 좋겠다. 

  - name : diffprocess.ksh         
  - sort : unix cmd를 이용해서 처리
  - 비교된 결과 diffresult 에 만들어 넣는 기능
